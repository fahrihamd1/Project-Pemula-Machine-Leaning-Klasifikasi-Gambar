# -*- coding: utf-8 -*-
"""Pemula Machine Learning_Klasifikasi Gambar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VRU1fTL8L91qLIRyQm3mA9uozZ4cCF2l

Muhammad Fahri Hamdi
fahrihamdi3@gmail.com
DKI Jakarta, Jakarta Selatan
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
import matplotlib.image as mpimg
# %matplotlib inline

!wget --no-check-certificate \
https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip

import os
import zipfile
from tensorflow.keras.preprocessing.image import ImageDataGenerator

local_zip = '/content/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

rock_dir = '/content/rockpaperscissors/rock'
paper_dir = '/content/rockpaperscissors/paper'
scissors_dir = '/content/rockpaperscissors/scissors'

print("Jumlah file dalam direktori rock:", len(os.listdir(rock_dir)))
print("Jumlah file dalam direktori paper:", len(os.listdir(paper_dir)))
print("Jumlah file dalam direktori scissors:", len(os.listdir(scissors_dir)))

# Menentukan direktori data latih
training_dir = "/content/rockpaperscissors/rps-cv-images"

image_generator = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='wrap',
    validation_split=0.4
)


train_datagen = image_generator.flow_from_directory(
    training_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    shuffle=True,
    subset='training'
)

validation_generator = image_generator.flow_from_directory(
    training_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    shuffle=True,
    subset='validation'
)

print("Informasi tentang generator data latih:")
print("Jumlah sampel data latih:", train_datagen.samples)
print("Jumlah kelas data latih:", train_datagen.num_classes)
print("Daftar kelas data latih:", train_datagen.class_indices)
print("\nInformasi tentang generator data validasi:")
print("Jumlah sampel data validasi:", validation_generator.samples)
print("Jumlah kelas data validasi:", validation_generator.num_classes)
print("Daftar kelas data validasi:", validation_generator.class_indices)

model.summary()

train_generator = image_generator.flow_from_directory(
    training_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    shuffle=True,
    subset='training'
)

validation_generator = image_generator.flow_from_directory(
    training_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    shuffle=True,
    subset='validation'
)

num_classes = len(train_generator.class_indices)

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(num_classes, activation='softmax')
])

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

history = model.fit(
    train_generator,
    epochs=5,
    validation_data=validation_generator,
    validation_steps=len(validation_generator),
    verbose=1
)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='training accuracy')
plt.plot(history.history['val_accuracy'], label='validation accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.plot(history.history['loss'], label='training loss')
plt.plot(history.history['val_loss'], label='validation loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

from google.colab import files
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt

uploaded = files.upload()

for fn in uploaded.keys():

  path = fn
  img = image.load_img(path, target_size =(150,150))
  plt.imshow(img)
  plt.axis('off')
  plt.show()

  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=15)

  predicted_class_index = np.argmax(classes[0])
  if predicted_class_index == 0:
    print('prediksi: kertas')
  elif predicted_class_index == 1:
    print('prediksi: batu')
  else:
    print('prediksi: gunting')